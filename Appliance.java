import java.util.Random;

/**
 * This class provides all properties and methods that an
 * {@code Appliance} subclass object should have in order
 * to keep track of all consumption generated by a {@link House}
 * object.
 *
 */
public abstract class Appliance {

    private String name;
    private Meter  meter;
    private String utilityName;

    Appliance(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the appliance.
     * @return name of the appliance
     */
    String getName() {
        return name;
    }

    /**
     * Sets a meter type
     * @param meter the meter to add to {@code Appliance}
     */
    public void setMeter(Meter meter) {

        this.meter       = meter;
        this.utilityName = meter.getUtilityName();
    }


    /**
     * Checks if a {@link Meter} object has been set
     * to the {@code Appliance} object.
     *
     * @throws Exception if no meter has been set.
     */
    public void checkMeterSet() throws Exception {
        if(this.meter == null){
            throw new Exception("The 'meter' has not been set." +
                    "\nSet meter in this appliance: " + this.getName());
        }

    }

    /**
     * Consumes the {@code units} into the {@code Meter}
     * attached to the {@link Appliance} object.
     *
     * @param units the units to consume
     */
    protected void tellMeterToConsumeUnits(float units){
        this.meter.consumeUnits(units);
    }

    /**
     * Defines in which way a subclass of {@code Appliance}
     * consumes their units each hour.
     */
    protected abstract void timePasses();


    /**
     *  Returns the next pseudorandom, uniformly distributed
     *  {@code float} value between {@code min} and {@code max}
     *  from this random number generator's sequence.
     *
     * @param min  the min units that cab be consumed each hour.
     * @param max  the max units that cab be consumed each hour.
     *
     * @return     the random units generated.
     */
    public float generateRandomUnits(float min , float max){

        float randomAmountOfUnits;
        if(min+max < 0){
            randomAmountOfUnits = new Random().nextFloat() * (min - max) + max;
        }else{
            randomAmountOfUnits = new Random().nextFloat() * (max - min) + min;
        }
        return randomAmountOfUnits;
    }
}
